from fastapi import APIRouter
from fastapi.responses import JSONResponse
from typing import List
from model import get_all_{{ entity.table_name|lower }}_with_filters
from utils import get_error_body
from view import Error, {{ entity.name }}


router = APIRouter()

@router.get("/api/{{ entity.table_name|lower }}/",
            responses={200: {"model": List[{{ entity.name }}]},
                       500: {"model": Error}},
            response_model=List[{{ entity.name }}],
            tags=[{{ entity.table_name|lower|tojson }}])
def get_{{ entity.table_name|lower }}(page: int = 1, items_per_page: int = 15):
    """
    Method that handles a generic GET request for all of the existent {{ entity.table_name|lower }}.
    """
    {{ entity.name|lower }}_list = []

    db_response = get_all_{{ entity.table_name|lower }}_with_filters()

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    else:
        status_code = 200
        for {{ entity.name|lower }} in db_response.payload:
            {{ entity.name|lower }}_list.append({{ entity.name }}.from_orm({{ entity.name|lower }}).dict())
        response_body = {{ entity.name|lower }}_list[(page - 1) * items_per_page:page * items_per_page]

    return JSONResponse(status_code=status_code, content=response_body)

@app.get("/api/{{ entity.table_name|lower }}/{ {{ entity.primary_key }} }",
         responses={200: {"model": {{ entity.name }}},
                    404: {"model": Error},
                    500: {"model": Error}},
         response_model={{ entity.name }},
         )
def get_{{ entity.name|lower }}({{ entity.primary_key }}: str):
    """
    Method that handles a GET request for a {{ entity.table_name|lower }} by the '{{ entity.primary_key }}' field.
    """
    db_response = get_{{ entity.name|lower }}_by_{{ entity.primary_key }}(str({{ entity.primary_key }}))

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    elif not db_response.completed_operation:
        status_code = 404
        response_body = {}
    else:
        status_code = 200

    response_body = Book.from_orm(db_response.payload).dict()

    return JSONResponse(status_code=status_code, content=response_body)
