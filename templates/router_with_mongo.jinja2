from fastapi import APIRouter, status, Response, Request
from typing import List
from model import get_all_{{ entity.table_name|lower }}_with_filters, get_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}, delete_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}, insert_{{ entity.name|lower }}, update_{{ entity.name|lower }}, upsert_{{ entity.name|lower }}
from utils import GenericSuccess, get_error_body, {{ entity.name|upper }}_NOT_FOUND_BODY, GENERIC_SUCCESS_STATUS_BODY, CREATE_GENERIC_SUCCESS_STATUS_BODY
from view import Error, {{ entity.name }}
{% if caching_enabled %}
from fastapi_cache.decorator import cache
{% endif %}

router = APIRouter()
{% macro not_found() -%}
    {{ entity.name|upper }}_NOT_FOUND_BODY
{%- endmacro %}

{% set NOT_FOUND = not_found() %}

@router.get("/api/{{ entity.table_name|lower }}/",
            responses={200: {"model": List[{{ entity.name }}]},
                       500: {"model": Error}},
            tags=[{{ entity.table_name|lower|tojson }}])
{% if caching_enabled -%}
@cache(expire={{ cache_for }})
{% endif %}
{% if caching_enabled -%}async {% endif %}def get_{{ entity.table_name|lower }}(request: Request, response: Response, page: int = 1, items_per_page: int = 15):
    """
    Method that handles a generic GET request for all of the existent {{ entity.table_name|lower }}.
    """
    {{ entity.name|lower }}_list = []

    try:
        db_response = get_all_{{ entity.table_name|lower }}_with_filters()
        for {{ entity.name|lower }} in db_response:
            {{ entity.name|lower }}_list.append({{ entity.name }}(**{{ entity.name|lower }}).dict())
        response_body = {{ entity.name|lower }}_list[(page - 1) * items_per_page:page * items_per_page]
        response.status_code = status.HTTP_200_OK
    except Exception as e:
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        response_body = get_error_body(response.status_code, str(e), "EXCEPTION")

    return response_body


@router.get("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
            responses={200: {"model": {{ entity.name }}},
                       404: {"model": Error},
                       500: {"model": Error}},
            tags=[{{ entity.table_name|lower|tojson }}])
{% if caching_enabled -%}
@cache(expire={{ cache_for }})
{% endif %}
{% if caching_enabled -%}async {% endif %}def get_{{ entity.name|lower }}({{ entity.primary_key }}: {{ entity.pk_type }}, request: Request, response: Response):
    """
    Method that handles a GET request for a {{ entity.table_name|lower }} by the '{{ entity.primary_key }}' field.
    """
    try:
        db_response = get_{{ entity.name|lower }}_by_{{ entity.primary_key }}({{ entity.primary_key }})

        if db_response is None:
            response.status_code = status.HTTP_404_NOT_FOUND
            response_body = {{ NOT_FOUND }}
        else:
            response.status_code = status.HTTP_200_OK
            response_body = {{ entity.name }}(**db_response).dict()
    except Exception as e:
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        response_body = get_error_body(response.status_code, str(e), "EXCEPTION")

    return response_body


@router.delete("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
               responses={500: {"model": Error},
                          404: {"model": Error},
                          200: {"model": GenericSuccess}},
               tags=[{{ entity.table_name|lower|tojson }}])
def delete_{{ entity.name|lower }}({{ entity.primary_key }}: {{ entity.pk_type }}, response: Response):
    """
    Method that handles a DELETE request for a {{ entity.table_name|lower }} by the '{{ entity.primary_key }}' field.
    """
    try:
        db_response = delete_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}({{ entity.primary_key }})

        if db_response.deleted_count > 0:
            response.status_code = status.HTTP_200_OK
            response_body = GENERIC_SUCCESS_STATUS_BODY
        else:
            response.status_code = status.HTTP_404_NOT_FOUND
            response_body = {{ NOT_FOUND }}
    except Exception as e:
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        response_body = get_error_body(response.status_code, str(e), "EXCEPTION")

    return response_body


@router.post("/api/{{ entity.table_name|lower }}/",
             responses={201: {"model": GenericSuccess},
                        500: {"model": Error}},
             tags=[{{ entity.table_name|lower|tojson }}])
def post_{{ entity.name|lower }}({{ entity.name|lower }}: {{ entity.name }}, response: Response):
    """
    Method that handles a POST request for a {{ entity.name|lower }}.
    """

    {{ entity.name|lower }}_dict = {{ entity.name|lower }}.dict()
    del {{ entity.name|lower }}_dict["links"]

    try:
        {{ entity.table_name|lower }} = get_all_{{ entity.table_name|lower }}_with_filters()
        for existing in {{ entity.table_name|lower }}:
            if existing["{{ entity.primary_key }}"] == {{ entity.name|lower }}.{{ entity.primary_key }}:
                response.status_code = status.HTTP_409_CONFLICT
                response_body = get_error_body(response.status_code,
                                               "Cannot create the resource with the given identifier because "
                                               "it already exists.",
                                               "DUPLICATE_ENTRY")
                return response_body

        db_response = insert_{{ entity.name|lower }}({{ entity.name|lower }}_dict)
        response.status_code = status.HTTP_201_CREATED
        response_body = CREATE_GENERIC_SUCCESS_STATUS_BODY
    except Exception as e:
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        response_body = get_error_body(response.status_code, str(e), "EXCEPTION")

    return response_body


@router.put("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
            responses={200: {"model": GenericSuccess},
                       201: {"model": GenericSuccess},
                       500: {"model": Error}},
            tags=[{{ entity.table_name|lower|tojson }}])
def put_{{ entity.name|lower }}({{ entity.primary_key }}: {{ entity.pk_type }}, {{ entity.name|lower }}: {{ entity.name }}, response: Response):
    """
    Method that handles a PUT request for a(n) {{ entity.name|lower }} by its '{{ entity.primary_key }}' field.
    Creates the {{ entity.name|lower }} if it doesn't already exist.
    """
    request_body = {{ entity.name|lower }}.dict()
    del request_body["links"]

    try:
        db_response = upsert_{{ entity.name|lower }}({{ entity.primary_key }}, request_body)

        if db_response.modified_count > 0:
            response.status_code = status.HTTP_200_OK
            response_body = GENERIC_SUCCESS_STATUS_BODY
        else:
            response.status_code = status.HTTP_201_CREATED
            response_body = CREATE_GENERIC_SUCCESS_STATUS_BODY
    except Exception as e:
        response.status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
        response_body = get_error_body(response.status_code, str(e), "EXCEPTION")

    return response_body