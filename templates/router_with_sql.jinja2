from fastapi import APIRouter
from utils import JsonResponse
from typing import List
from model import get_all_{{ entity.table_name|lower }}_with_filters, get_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}, delete_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}, insert_{{ entity.name|lower }}, update_{{ entity.name|lower }}
from utils import GenericSuccess, get_error_body, {{ entity.name|upper }}_NOT_FOUND_BODY, GENERIC_SUCCESS_STATUS_BODY, CREATE_GENERIC_SUCCESS_STATUS_BODY
from view import Error, {{ entity.name }}
{% if caching_enabled %}
from fastapi_cache.decorator import cache
{% endif %}

router = APIRouter()
{% macro not_found() -%}
    {{ entity.name|upper }}_NOT_FOUND_BODY
{%- endmacro %}

{% set NOT_FOUND = not_found() %}

{% if caching_enabled -%}
@cache(expire=60)
{% endif %}
@router.get("/api/{{ entity.table_name|lower }}/",
            responses={200: {"model": List[{{ entity.name }}]},
                       500: {"model": Error}},
            response_model=List[{{ entity.name }}],
            tags=[{{ entity.table_name|lower|tojson }}])
def get_{{ entity.table_name|lower }}(page: int = 1, items_per_page: int = 15):
    """
    Method that handles a generic GET request for all of the existent {{ entity.table_name|lower }}.
    """
    {{ entity.name|lower }}_list = []

    db_response = get_all_{{ entity.table_name|lower }}_with_filters()

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    else:
        status_code = 200
        for {{ entity.name|lower }} in db_response.payload:
            {{ entity.name|lower }}_list.append({{ entity.name }}.from_orm({{ entity.name|lower }}).dict())
        response_body = {{ entity.name|lower }}_list[(page - 1) * items_per_page:page * items_per_page]

    return JsonResponse(status_code=status_code, content=response_body)


{% if caching_enabled -%}
@cache(expire=60)
{% endif %}
@router.get("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
            responses={200: {"model": {{ entity.name }}},
                       404: {"model": Error},
                       500: {"model": Error}},
            response_model={{ entity.name }},
            tags=[{{ entity.table_name|lower|tojson }}])
def get_{{ entity.name|lower }}({{ entity.primary_key }}: str):
    """
    Method that handles a GET request for a {{ entity.table_name|lower }} by the '{{ entity.primary_key }}' field.
    """
    db_response = get_{{ entity.name|lower }}_by_{{ entity.primary_key }}(str({{ entity.primary_key }}))

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    elif not db_response.completed_operation:
        status_code = 404
        response_body = {{ NOT_FOUND }}
    else:
        status_code = 200
        response_body = {{ entity.name }}.from_orm(db_response.payload).dict()

    return JsonResponse(status_code=status_code, content=response_body)


@router.delete("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
               response_model=GenericSuccess,
               responses={500: {"model": Error},
                          404: {"model": Error},
                          200: {"model": GenericSuccess}},
               tags=[{{ entity.table_name|lower|tojson }}])
def delete_{{ entity.name|lower }}({{ entity.primary_key }}: str):
    """
    Method that handles a DELETE request for a {{ entity.table_name|lower }} by the '{{ entity.primary_key }}' field.
    """
    db_response = delete_{{ entity.name|lower }}_by_{{ entity.primary_key|lower }}(str({{ entity.primary_key }}))

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    elif not db_response.completed_operation:
        status_code = 404
        response_body = {{ NOT_FOUND }}
    else:
        status_code = 200
        response_body = GENERIC_SUCCESS_STATUS_BODY

    return JsonResponse(status_code=status_code, content=response_body)


@router.post("/api/{{ entity.table_name|lower }}/",
             responses={201: {"model": GenericSuccess},
                        500: {"model": Error}},
             response_model=GenericSuccess,
             tags=[{{ entity.table_name|lower|tojson }}])
def post_{{ entity.name|lower }}({{ entity.name|lower }}: {{ entity.name }}):
    """
    Method that handles a POST request for a {{ entity.name|lower }}.
    """

    {{ entity.name|lower }}_dict = {{ entity.name|lower }}.dict()
    del {{ entity.name|lower }}_dict["links"]

    db_response = insert_{{ entity.name|lower }}(**{{ entity.name|lower }}_dict)

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    else:
        status_code = 201
        response_body = CREATE_GENERIC_SUCCESS_STATUS_BODY

    return JsonResponse(status_code=status_code, content=response_body)


@router.put("/api/{{ entity.table_name|lower }}/{% raw %}{{% endraw %}{{ entity.primary_key }}{% raw %}}{% endraw %}",
            responses={200: {"model": GenericSuccess},
                       201: {"model": GenericSuccess},
                       500: {"model": Error},
                       406: {"model": Error}},
            response_model=GenericSuccess,
            tags=[{{ entity.table_name|lower|tojson }}])
def put_{{ entity.name|lower }}({{ entity.primary_key }}: str, {{ entity.name|lower }}: {{ entity.name }}):
    """
    Method that handles a PUT request for a(n) {{ entity.name|lower }} by its '{{ entity.primary_key }}' field.
    Creates the {{ entity.name|lower }} if it doesn't already exist.
    """
    request_body = {{ entity.name|lower }}.dict()
    del request_body["links"]

    db_response = update_{{ entity.name|lower }}({{ entity.primary_key }}, request_body)

    if db_response.error:
        status_code = 500
        response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
    elif db_response.completed_operation is False:
        db_response = insert_{{ entity.name|lower }}(**request_body)

        if db_response.error:
            status_code = 500
            response_body = get_error_body(status_code, str(db_response.error), "EXCEPTION")
        else:
            status_code = 201
            response_body = CREATE_GENERIC_SUCCESS_STATUS_BODY
    else:
        status_code = 200
        response_body = GENERIC_SUCCESS_STATUS_BODY

    return JsonResponse(status_code=status_code, content=response_body)