from fastapi import FastAPI
from fastapi_hypermodel import HyperModel
{% for resource in resources %}
import {{ resource.name|lower }}_router
{%  endfor %}
{% if caching_enabled -%}
import aioredis
from fastapi_cache import FastAPICache
from fastapi_cache.backends.redis import RedisBackend
{% endif %}

app = FastAPI(
    title="{{ project_metadata["title"] }}",
    description="{{ project_metadata["description"] }}",
    version="{{ project_metadata["version"] }}",
    {% if project_metadata["creator_name"] != "" or project_metadata["creator_website"] != "" %}
    contact={
        {% if project_metadata["creator_name"] != "" %}
        "name": "{{ project_metadata["creator_name"] }}",
        {% endif %}
        {% if project_metadata["creator_website"] != "" %}
        "url": "{{ project_metadata["creator_website"] }}"
        {% endif %}
    }
    {% endif %}
)

{% for resource in resources %}
app.include_router({{ resource.name|lower }}_router.router)
{%  endfor %}

HyperModel.init_app(app)


{% if caching_enabled -%}
@app.on_event("startup")
async def startup():
    redis = aioredis.from_url("redis://redis", encoding="utf8", decode_responses=True)
    FastAPICache.init(RedisBackend(redis), prefix="fastapi-cache")
{% endif %}
